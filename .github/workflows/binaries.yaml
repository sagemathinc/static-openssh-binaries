name: Build and Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - ci
    tags:
      - '*'        # build & release on any tag push, e.g. v1.2.3
  schedule:
    - cron: "0 0 * * 0"

permissions:
  contents: write   # required to create releases

jobs:
  build:
    strategy:
      matrix:
        config:
          - arch: x86-64
            config: ARCH=x86-64 PREFIX=/openssh SHRINK=SHRINK_LEVEL_RUNTIME __all__/VERSION=latest
            description: x86_64-small

          - arch: aarch64
            config: ARCH=aarch64 PREFIX=/openssh SHRINK=SHRINK_LEVEL_RUNTIME __all__/VERSION=latest
            description: aarch64-small

    env:
      MAKEFLAGS: SHELL=/usr/bin/bash

    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt update && sudo apt install -y upx zip

      - name: Get number of CPU cores
        uses: SimenB/github-actions-cpu-cores@v2
        id: cpu-cores

      - name: Build
        run: |
          make config ${{ matrix.config.config }}
          make -j${{ steps.cpu-cores.outputs.count }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ssh-binaries-for-${{ matrix.config.description }}
          path: |
            output/${{ matrix.config.arch }}/bin/

  release:
    name: Create GitHub Release (on tag)
    needs: build
    runs-on: ubuntu-24.04
    if: startsWith(github.ref, 'refs/tags/')   # only run this job for tag pushes

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          # NOTE: keep merge-multiple:false (default) so each artifact has its own subdir

      - name: Package per-arch into archives
        shell: bash
        run: |
          set -euo pipefail
          TAG="${GITHUB_REF_NAME}"   # e.g. v1.2.3 or 2025-10-01c
          mkdir -p release

          for artifact_dir in dist/*; do
            [ -d "$artifact_dir" ] || continue
            base="$(basename "$artifact_dir")"
            arch="${base#ssh-binaries-for-}"     # e.g. x86_64-small or aarch64-small

            # Find the inner tgz (e.g. openssh-V_9_9_P2.tgz)
            tgz="$(find "$artifact_dir" -maxdepth 1 -name 'openssh-*.tgz' | head -n1 || true)"
            if [ -z "${tgz:-}" ]; then
              echo "WARN: no openssh-*.tgz found in $artifact_dir; contents:"
              ls -la "$artifact_dir"
              continue
            fi

            # Extract inner tgz into a staging dir
            stage="stage/${arch}"
            rm -rf "$stage"
            mkdir -p "$stage"
            tar -xzf "$tgz" -C "$stage"

            # At this point we should have $stage/openssh/{bin,libexec,sbin,etc,var/empty}
            if [ ! -d "$stage/openssh" ]; then
              echo "ERROR: expected $stage/openssh after extraction"
              exit 1
            fi

            # Produce clean archives with just the openssh/ tree + README
            PKG_BASE="openssh-static-${arch}-${TAG}"
            (cd "stage/${arch}" && tar -czf "../../../release/${PKG_BASE}.tar.gz" openssh)

          done

          # Generate SHA256SUMS for all archives
          (cd release && sha256sum * > SHA256SUMS.txt)

          echo "Release artifacts:"
          ls -l release

      - name: Create release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}    # e.g. v1.2.3
          name: ${{ github.ref_name }}
          body: |
            Automated release for ${{ github.ref_name }}.

            This release includes per-arch archives of static OpenSSH client binaries.
            A SHA256SUMS.txt is provided for verification.
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release/*.tar.gz
            release/SHA256SUMS.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
